{"version":3,"file":"static/webpack/static/development/pages/post.js.09598d31154d9576327e.hot-update.js","sources":["webpack:///./pages/post.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { withRouter } from \"next/router\"\nimport Page from \"../src/components/Page\"\n\nimport { config } from \"../src/config\"\nimport { PostJson } from \".\"\nimport { NextContext } from \"next\"\nimport posts from \"../src/buildtime/get-post\"\nimport { Post } from \"../src/buildtime/parse-posts\"\nimport { makeUrl } from \"../src/utils/content\"\nimport ReactMarkdown from \"react-markdown\"\nimport { BarChart, XAxis, YAxis, Tooltip, Legend, Bar } from \"recharts\"\nimport { load } from \"js-yaml\"\n\ntype Props = { post: Post }\n\ndeclare module \"react\" {\n\tinterface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n\t\tjsx?: boolean\n\t\tglobal?: boolean\n\t}\n}\n\nclass PostUI extends React.Component<Props> {\n\tstatic getInitialProps(ctx: NextContext): Props {\n\t\t// todo: only load single post\n\t\t//console.log(posts.map(p => makeUrl(p.filename)), ctx.asPath)\n\n\t\t// const slug = ctx.query.slug\n\t\tconst post = posts.find(p => makeUrl(p.filename) === ctx.asPath)\n\t\tif (!post) throw Error(`could not find post ${ctx.asPath}`)\n\t\treturn { post }\n\t}\n\trender() {\n\t\tconst { post } = this.props\n\t\tconsole.log(\"props\", this.props)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<style jsx global>{`\n\t\t\t\t\t.content a {\n\t\t\t\t\t\tcolor: #0365a5;\n\t\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\t\tborder-bottom: 1px solid #dfdfdf;\n\t\t\t\t\t\ttransition: all 300ms ease;\n\t\t\t\t\t}\n\n\t\t\t\t\ta:hover,\n\t\t\t\t\ta:focus {\n\t\t\t\t\t\tborder-bottom-color: currentColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tcode {\n\t\t\t\t\t\tbackground-color: #eee;\n\t\t\t\t\t\tline-height: 1;\n\t\t\t\t\t\tborder-radius: 2px;\n\t\t\t\t\t\tpadding: 1px;\n\t\t\t\t\t}\n\t\t\t\t\tcode:not(.hljs) {\n\t\t\t\t\t\tborder: 1px solid #ddd;\n\t\t\t\t\t}\n\t\t\t\t`}</style>\n\t\t\t\t<Page title={post.frontmatter.title}>\n\t\t\t\t\t<div className=\"content center mw7 pa3 pa4-ns\">\n\t\t\t\t\t\t<h1 className=\"mt0 lh-title\">\n\t\t\t\t\t\t\t{post.frontmatter.title}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<ReactMarkdown renderers={{ code: Code }}>\n\t\t\t\t\t\t\t{post.content_md}\n\t\t\t\t\t\t</ReactMarkdown>\n\t\t\t\t\t</div>\n\t\t\t\t</Page>\n\t\t\t</div>\n\t\t)\n\t}\n}\ntype CodeProps = { language?: string; value: string }\n\nfunction Code(props: CodeProps) {\n\tconst components: { [name: string]: React.ComponentType<CodeProps> } = {\n\t\tbarchart: CodeBarChart,\n\t}\n\tconst Component = components[(props.language || \"\") as any]\n\tif (Component) {\n\t\treturn <Component {...props} />\n\t}\n\treturn (\n\t\t<pre>\n\t\t\t<code className={`language-${props.language}`}>{props.value}</code>\n\t\t</pre>\n\t)\n}\nfunction CodeBarChart(props: CodeProps) {\n\tconst info = load(props.value)\n\tconsole.log(info)\n\tlet data = info.data\n\tif (typeof data === \"object\") {\n\t\tdata = Object.entries(data).map(([name, value]) => ({\n\t\t\tname,\n\t\t\tvalue,\n\t\t}))\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<div style={{ textAlign: \"center\" }}>\n\t\t\t\t<p>{info.title}</p>\n\t\t\t\t{info.subtitle && <p>{info.subtitle}</p>}\n\t\t\t</div>\n\t\t\t<BarChart width={600} height={200} data={data} layout=\"vertical\">\n\t\t\t\t<XAxis type=\"number\" />\n\t\t\t\t<YAxis type=\"category\" dataKey=\"name\" width={200} />\n\t\t\t\t<Tooltip />\n\t\t\t\t<Legend />\n\t\t\t\t<Bar dataKey=\"value\" name={info.seriesName} fill=\"#8884d8\" />\n\t\t\t</BarChart>\n\t\t</div>\n\t)\n}\n\nexport default withRouter(PostUI)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAUA;;;;;;;;;;;;;AAUA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAwBA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;;;AAjDA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;;AATA;AACA;AAqDA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}