(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"9g2p":function(e){e.exports=JSON.parse('{"filename":"2019/rga--ripgrep-for-zip-targz-docx-odt-epub-jpg.md","frontmatter":{"references":[{"note":"original-date: 2019-08-19T22:24:50Z","URL":"https://github.com/phiresky/pandoc-url2cite","title-short":"Effortlessly and transparently add correctly styled citations to your markdown paper given only a URL","author":[{"literal":"phiresky"}],"id":"https://github.com/phiresky/pandoc-url2cite","accessed":{"date-parts":[["2019","12","14"]]},"issued":{"date-parts":[["2019","12"]]},"title":"Effortlessly and transparently add correctly styled citations to your markdown paper given only a URL: Phiresky/pandoc-url2cite","type":"no-type"},{"URL":"https://citationstyles.org/","container-title":"Citation Style Language","author":[{"family":"Name","given":"Your"}],"id":"https://citationstyles.org/","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"CitationStyles.org, home of the Citation Style Language (CSL), a popular open XML-based language to describe the formatting of citations and bibliographies.","title":"Citation Style Language","type":"no-type"},{"URL":"https://www.mendeley.com/?interaction_required=true","container-title":"www.mendeley.com","id":"https://www.mendeley.com/","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"Mendeley is a free reference manager and an academic social network. Manage your research, showcase your work, connect and collaborate with over five million researchers worldwide.","title":"Mendeley - Reference Management Software & Researcher Network","type":"no-type"},{"URL":"https://www.zotero.org/","container-title":"www.zotero.org","id":"https://www.zotero.org/","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"Zotero is a free, easy-to-use tool to help you collect, organize, cite, and share research.","title":"Zotero Your personal research assistant","type":"no-type"},{"URL":"https://phiresky.github.io/blog/2019/pandoc-url2cite/","container-title":"phiresky.github.io","id":"https://phiresky.github.io/blog/2019/pandoc-url2cite/","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"pandoc-url2cite[1] allows you to instantly and transparently cite most papers directly given only a single URL. You simply add a URL of a publication, and it will replace that with a real citation in whatever CSL[2] style you want. This means you can avoid dealing with Mendeley[3] or Zotero[4] and","title":"Automatic citation extraction from URLs (draft) - phiresky\u2019s blog","type":"no-type"},{"URL":"https://opensource.com/article/18/9/pandoc-research-paper","container-title":"Opensource.com","author":[{"family":"Kiko","given":"Fernandez-Reyes"}],"id":"https://opensource.com/article/18/9/pandoc-research-paper","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"Learn how to manage section references, figures, tables, and more in Markdown.","title":"How to use Pandoc to produce a research paper","type":"no-type"},{"URL":"https://pandoc.org/MANUAL.html#citations","container-title":"pandoc.org","id":"https://pandoc.org/MANUAL.html#citations","accessed":{"date-parts":[["2019","12","14"]]},"title":"Pandoc - Pandoc User\u2019s Guide","type":"no-type"},{"URL":"https://pandoc.org/MANUAL.html#extension-yaml_metadata_block","container-title":"pandoc.org","id":"https://pandoc.org/MANUAL.html#extension-yaml_metadata_block","accessed":{"date-parts":[["2019","12","14"]]},"title":"Pandoc - Pandoc User\u2019s Guide","type":"no-type"},{"note":"original-date: 2013-09-20T08:26:14Z","URL":"https://github.com/retorquere/zotero-better-bibtex","author":[{"family":"Heyns","given":"Emiliano"}],"id":"https://github.com/retorquere/zotero-better-bibtex","accessed":{"date-parts":[["2019","12","14"]]},"issued":{"date-parts":[["2019","12"]]},"title":"Make Zotero effective for us LaTeX holdouts. Contribute to retorquere/zotero-better-bibtex development by creating an account on GitHub","type":"no-type"},{"URL":"https://www.zotero.org/support/dev/translators","title-short":"Dev","container-title":"www.zotero.org","id":"https://www.zotero.org/support/dev/translators","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"Zotero is a free, easy-to-use tool to help you collect, organize, cite, and share research.","title":"Dev:Translators [Zotero Documentation]","type":"no-type"},{"note":"original-date: 2018-06-11T11:28:53Z","URL":"https://github.com/zotero/translation-server","id":"https://github.com/zotero/translation-server","accessed":{"date-parts":[["2019","12","14"]]},"issued":{"date-parts":[["2019","12"]]},"title":"A Node.Js-based server to run Zotero translators. Contribute to zotero/translation-server development by creating an account on GitHub","type":"no-type","publisher":"zotero"},{"URL":"https://www.mediawiki.org/wiki/Citoid/API","container-title":"www.mediawiki.org","id":"https://www.mediawiki.org/wiki/Citoid/API","accessed":{"date-parts":[["2019","12","14"]]},"title":"Citoid/API - MediaWiki","type":"no-type"},{"URL":"https://github.com/zotero/translation-server/issues/70","container-title":"GitHub","id":"https://github.com/zotero/translation-server/issues/70","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"Related to #38, but a few translators are able to function based on the URL, even when it&#39;s a PDF page. We should try to support those cases, before either trying PDF recognition (from #38) or ...","title":"Try translating PDF URLs based on URL \xb7 Issue #70 \xb7 zotero/translation-server","type":"no-type"},{"URL":"https://www.overleaf.com/learn/latex/Bibtex_bibliography_styles","container-title":"www.overleaf.com","id":"https://www.overleaf.com/learn/latex/Bibtex_bibliography_styles","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"An online LaTeX editor that\u2019s easy to use. No installation, real-time collaboration, version control, hundreds of LaTeX templates, and more.","title":"Bibtex bibliography styles","type":"no-type"},{"URL":"http://ogp.me/","container-title":"ogp.me","id":"https://ogp.me/","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"The Open Graph protocol enables any web page to become a rich object in a social graph.","title":"Open Graph protocol","type":"no-type"},{"URL":"https://github.com/jgm/pandoc-citeproc/issues/308","container-title":"GitHub","id":"https://github.com/jgm/pandoc-citeproc/issues/308","accessed":{"date-parts":[["2019","12","14"]]},"abstract":"I want to use this citekey: [@https://ww3.cad.de/cgi-bin/ubb/forumdisplay.cgi?action=topics&amp;number=527] from this bib file: @misc{}https://ww3.cad.de/cgi-bin/ubb/forumdisplay.cgi?action=topics&a...","title":"Url as citekey/referencekey \xb7 Issue #308 \xb7 jgm/pandoc-citeproc","type":"no-type"},{"ISSN":"0001-0782","DOI":"10.1145/3065386","volume":"60","URL":"http://doi.acm.org/10.1145/3065386","page":"84-90","container-title":"Commun. ACM","author":[{"family":"Krizhevsky","given":"Alex"},{"family":"Sutskever","given":"Ilya"},{"family":"Hinton","given":"Geoffrey E."}],"id":"http://dl.acm.org/citation.cfm?doid=3098997.3065386","accessed":{"date-parts":[["2019","12","14"]]},"issued":{"date-parts":[["2017","5"]]},"abstract":"We trained a large, deep convolutional neural network to classify the 1.2 million high-resolution images in the ImageNet LSVRC-2010 contest into the 1000 different classes. On the test data, we achieved top-1 and top-5 error rates of 37.5% and 17.0%, respectively, which is considerably better than the previous state-of-the-art. The neural network, which has 60 million parameters and 650,000 neurons, consists of five convolutional layers, some of which are followed by max-pooling layers, and three fully connected layers with a final 1000-way softmax. To make training faster, we used non-saturating neurons and a very efficient GPU implementation of the convolution operation. To reduce overfitting in the fully connected layers we employed a recently developed regularization method called \\"dropout\\" that proved to be very effective. We also entered a variant of this model in the ILSVRC-2012 competition and achieved a winning top-5 test error rate of 15.3%, compared to 26.2% achieved by the second-best entry.","title":"ImageNet Classification with Deep Convolutional Neural Networks","type":"article-journal","issue":"6"},{"note":"arXiv: 1409.1556","URL":"http://arxiv.org/abs/1409.1556","container-title":"arXiv:1409.1556 [cs]","author":[{"family":"Simonyan","given":"Karen"},{"family":"Zisserman","given":"Andrew"}],"id":"https://arxiv.org/abs/1409.1556","accessed":{"date-parts":[["2019","12","14"]]},"issued":{"date-parts":[["2014","9"]]},"abstract":"In this work we investigate the effect of the convolutional network depth on its accuracy in the large-scale image recognition setting. Our main contribution is a thorough evaluation of networks of increasing depth using an architecture with very small (3x3) convolution filters, which shows that a significant improvement on the prior-art configurations can be achieved by pushing the depth to 16-19 weight layers. These findings were the basis of our ImageNet Challenge 2014 submission, where our team secured the first and the second places in the localisation and classification tracks respectively. We also show that our representations generalise well to other datasets, where they achieve state-of-the-art results. We have made our two best-performing ConvNet models publicly available to facilitate further research on the use of deep visual representations in computer vision.","title":"Very Deep Convolutional Networks for Large-Scale Image Recognition","type":"article-journal","keyword":"Computer Science - Computer Vision and Pattern Recognition"},{"DOI":"10.1109/CVPR.2015.7298594","URL":"https://ieeexplore.ieee.org/document/7298594","page":"1-9","container-title":"2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)","author":[{"family":"Szegedy","given":"C."},{"literal":"Wei Liu"},{"literal":"Yangqing Jia"},{"family":"Sermanet","given":"P."},{"family":"Reed","given":"S."},{"family":"Anguelov","given":"D."},{"family":"Erhan","given":"D."},{"family":"Vanhoucke","given":"V."},{"family":"Rabinovich","given":"A."}],"id":"https://ieeexplore.ieee.org/document/7298594","accessed":{"date-parts":[["2019","12","14"]]},"issued":{"date-parts":[["2015","6"]]},"abstract":"We propose a deep convolutional neural network architecture codenamed Inception that achieves the new state of the art for classification and detection in the ImageNet Large-Scale Visual Recognition Challenge 2014 (ILSVRC14). The main hallmark of this architecture is the improved utilization of the computing resources inside the network. By a carefully crafted design, we increased the depth and width of the network while keeping the computational budget constant. To optimize quality, the architectural decisions were based on the Hebbian principle and the intuition of multi-scale processing. One particular incarnation used in our submission for ILSVRC14 is called GoogLeNet, a 22 layers deep network, the quality of which is assessed in the context of classification and detection.","title":"Going deeper with convolutions","type":"paper-conference","keyword":"convolution, decision making, feature extraction, Hebbian learning, image classification, neural net architecture, resource allocation, convolutional neural network architecture, resource utilization, architectural decision, Hebbian principle, object classification, object detection, Computer architecture, Convolutional codes, Sparse matrices, Neural networks, Visualization, Object detection, Computer vision"},{"DOI":"10.1109/CVPR.2016.90","URL":"https://ieeexplore.ieee.org/document/7780459","page":"770-778","container-title":"2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)","author":[{"family":"He","given":"K."},{"family":"Zhang","given":"X."},{"family":"Ren","given":"S."},{"family":"Sun","given":"J."}],"id":"https://ieeexplore.ieee.org/document/7780459","accessed":{"date-parts":[["2019","12","14"]]},"issued":{"date-parts":[["2016","6"]]},"abstract":"Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers - 8\xd7 deeper than VGG nets [40] but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers. The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions1, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation.","title":"Deep Residual Learning for Image Recognition","type":"paper-conference","keyword":"image classification, learning (artificial intelligence), neural nets, object detection, COCO segmentation, ImageNet localization, ILSVRC & COCO 2015 competitions, deep residual nets, COCO object detection dataset, visual recognition tasks, CIFAR-10, ILSVRC 2015 classification task, ImageNet test set, VGG nets, residual nets, ImageNet dataset, residual function learning, deeper neural network training, image recognition, deep residual learning, Training, Degradation, Complexity theory, Image recognition, Neural networks, Visualization, Image segmentation"},{"note":"original-date: 2019-08-19T22:24:50Z","URL":"https://github.com/phiresky/pandoc-url2cite/blob/master/example/doi-isbn.md","title-short":"pandoc-url2cite/example/doi-isbn.md","author":[{"literal":"phiresky"}],"id":"https://github.com/phiresky/pandoc-url2cite/blob/master/example/doi-isbn.md","accessed":{"date-parts":[["2019","12","14"]]},"issued":{"date-parts":[["2019","12"]]},"title":"pandoc-url2cite/example/doi-isbn.md","type":"no-type"}],"date":"2019-06-16","csl":"../ieee-with-url.csl","url2cite-link-output":"sup","updated":"2019-10-21","title":"rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc."},"preview":"rga is a line-oriented search tool that allows you to look for a regex in a multitude of file types. rga wraps the awesome ripgrep and enables it to search in pdf, docx, sqlite, jpg, zip, tar.*, movie subtitles (mkv, mp4), etc. github repo Crates.io fearless concurrencyExamplesPDFs Say you have a","content_ast":[{"t":"Para","c":[{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"rga"}],["https://github.com/phiresky/ripgrep-all",""]]},{"t":"Str","c":" is a line-oriented search tool that allows you to look for a regex in a multitude of file types. rga wraps the awesome "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"ripgrep"}],["https://github.com/BurntSushi/ripgrep",""]]},{"t":"Str","c":" and enables it to search in pdf, docx, sqlite, jpg, zip, tar.*, movie subtitles (mkv, mp4), etc."}]},{"t":"Para","c":[{"t":"Link","c":[["",[],[]],[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"github repo"}],["https://img.shields.io/badge/repo-github.com%2Fphiresky%2Fripgrep--all-informational.svg",""]]}],["https://github.com/phiresky/ripgrep-all",""]]},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"Crates.io"}],["https://img.shields.io/crates/v/ripgrep-all.svg",""]]}],["https://crates.io/crates/ripgrep-all",""]]},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Image","c":[["",[],[]],[{"t":"Str","c":"fearless concurrency"}],["https://img.shields.io/badge/concurrency-fearless-success.svg",""]]}],["https://www.reddit.com/r/rustjerk/top/?sort=top&t=all",""]]}]},{"t":"Header","c":[2,["examples",[],[]],[{"t":"Str","c":"Examples"}]]},{"t":"Header","c":[3,["pdfs",[],[]],[{"t":"Str","c":"PDFs"}]]},{"t":"Para","c":[{"t":"Str","c":"Say you have a large folder of papers or lecture slides, and you can\u2019t remember which one of them mentioned "},{"t":"Code","c":[["",[],[]],"GRU"]},{"t":"Str","c":"s. With rga, you can just run this:"}]},{"t":"RawBlock","c":["html","<pre class=\\"ansi2html language-none\\">~$ rga \\"GRU\\" slides/\\n<span class=\\"ansi35\\">slides/2016/winter1516_lecture14.pdf</span>\\nPage 34:   <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">GRU</span>                            LSTM\\nPage 35:   <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">GRU</span>                            CONV\\nPage 38:     - Try out <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">GRU</span>-RCN! (imo best model)\\n\\n<span class=\\"ansi35\\">slides/2018/cs231n_2018_ds08.pdf</span>\\nPage  3: \u25cf   CNNs, GANs, RNNs, LSTMs, <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">GRU</span>\\nPage 35: \u25cf 1) temporal pooling 2) RNN (e.g. LSTM, <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">GRU</span>)\\n\\n<span class=\\"ansi35\\">slides/2019/cs231n_2019_lecture10.pdf</span>\\nPage 103:   <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">GRU</span> [Learning phrase representations using rnn\\nPage 105:    - Common to use LSTM or <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">GRU</span>\\n\\n</pre>"]},{"t":"Para","c":[{"t":"Str","c":"and it will recursively find a string in pdfs, including if some of them are zipped up."}]},{"t":"Para","c":[{"t":"Str","c":"You can do mostly the same thing with "},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"pdfgrep -r"]}],["https://pdfgrep.org/",""]]},{"t":"Str","c":", but you will miss content in other file types and it will be much slower:"}]},{"t":"CodeBlock","c":[["",["barchart"],[]],"title: Searching in 65 pdfs with 93 slides each\\nseries: run time (seconds, lower is better)\\ndata:\\n   pdfgrep: 19.16\\n   rga (first run): 2.95\\n   rga (subsequent runs): 0.092"]},{"t":"Para","c":[{"t":"Str","c":"On the first run rga is mostly faster because of multithreading, but on subsequent runs (with the same files but any regex query) rga will cache the text extraction, so it becomes almost as fast as searching in plain text files. All runs were done with a warm FS cache."}]},{"t":"Header","c":[3,["other-files",[],[]],[{"t":"Str","c":"Other files"}]]},{"t":"Para","c":[{"t":"Str","c":"rga will recursively descend into archives and match text in every file type it knows."}]},{"t":"Para","c":[{"t":"Str","c":"Here is an example directory with different file types:"}]},{"t":"CodeBlock","c":[["",[],[]],"demo\\n\u251c\u2500\u2500 greeting.mkv\\n\u251c\u2500\u2500 hello.odt\\n\u251c\u2500\u2500 hello.sqlite3\\n\u2514\u2500\u2500 somearchive.zip\\n    \u251c\u2500\u2500 dir\\n    \u2502\xa0\xa0 \u251c\u2500\u2500 greeting.docx\\n    \u2502\xa0\xa0 \u2514\u2500\u2500 inner.tar.gz\\n    \u2502\xa0\xa0     \u2514\u2500\u2500 greeting.pdf\\n    \u2514\u2500\u2500 greeting.epub"]},{"t":"Para","c":[{"t":"Str","c":"(see the actual directory "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"here"}],["https://github.com/phiresky/ripgrep-all/tree/master/exampledir/demo",""]]},{"t":"Str","c":")"}]},{"t":"RawBlock","c":["html","<pre class=\\"ansi2html language-none\\">~$ rga \\"hello\\" demo/\\n\\n<span class=\\"ansi35\\">demo/greeting.mkv</span>\\nmetadata: chapters.chapter.0.tags.title=\\"Chapter 1: <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">Hello</span>\\"\\n00:08.398 --&gt; 00:11.758: <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">Hello</span> from a movie!\\n\\n<span class=\\"ansi35\\">demo/hello.odt</span>\\n<span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">Hello</span> from an OpenDocument file!\\n\\n<span class=\\"ansi35\\">demo/hello.sqlite3</span>\\ntbl: greeting=\'<span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">hello</span>\', from=\'sqlite database!\'\\n\\n<span class=\\"ansi35\\">demo/somearchive.zip</span>\\ndir/greeting.docx: <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">Hello</span> from a MS Office document!\\ndir/inner.tar.gz: greeting.pdf: Page 1: <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">Hello</span> from a PDF!\\ngreeting.epub: <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">Hello</span> from an E-Book!\\n</pre>"]},{"t":"Para","c":[{"t":"Str","c":"It can even search jpg / png images and scanned pdfs using OCR, though this is disabled by default since it is not useful that often and pretty slow."}]},{"t":"RawBlock","c":["html","<pre class=\\"ansi2html language-none\\">~$ # find screenshot of crates.io\\n~$ rga crates ~/screenshots --rga-adapters=+pdfpages,tesseract\\n<span class=\\"ansi35\\">screenshots/2019-06-14-19-01-10.png</span>\\n<span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">crates</span>.io I Browse All <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">Crates</span>  Docs v\\nDocumentation Repository Dependent <span class=\\"ansi1\\"></span><span class=\\"ansi1 ansi31\\">crates</span>\\n\\n~$ # there it is!\\n</pre>"]},{"t":"Header","c":[2,["setup",[],[]],[{"t":"Str","c":"Setup"}]]},{"t":"Para","c":[{"t":"Str","c":"Linux, Windows and OSX binaries are available in GitHub releases. See "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"the readme"}],["https://github.com/phiresky/ripgrep-all#installation",""]]},{"t":"Str","c":" for more information."}]},{"t":"Para","c":[{"t":"Str","c":"For Arch Linux, I have packaged "},{"t":"Code","c":[["",[],[]],"rga"]},{"t":"Str","c":" in the AUR: "},{"t":"Link","c":[["",[],[]],[{"t":"Code","c":[["",[],[]],"yay -S ripgrep-all"]}],["https://aur.archlinux.org/packages/ripgrep-all/",""]]}]},{"t":"Header","c":[2,["technical-details",[],[]],[{"t":"Str","c":"Technical details"}]]},{"t":"Para","c":[{"t":"Str","c":"The code and a few more details are here: "},{"t":"Link","c":[["",["uri"],[]],[{"t":"Str","c":"https://github.com/phiresky/ripgrep-all"}],["https://github.com/phiresky/ripgrep-all",""]]}]},{"t":"Para","c":[{"t":"Code","c":[["",[],[]],"rga"]},{"t":"Str","c":" simply runs ripgrep ("},{"t":"Code","c":[["",[],[]],"rg"]},{"t":"Str","c":") with some options set, especially "},{"t":"Code","c":[["",[],[]],"--pre=rga-preproc"]},{"t":"Str","c":" and "},{"t":"Code","c":[["",[],[]],"--pre-glob"]},{"t":"Str","c":"."}]},{"t":"Para","c":[{"t":"Code","c":[["",[],[]],"rga-preproc [fname]"]},{"t":"Str","c":" will match an "},{"t":"Quoted","c":[{"t":"DoubleQuote"},[{"t":"Str","c":"adapter"}]]},{"t":"Str","c":" to the given file based on either it\u2019s filename or it\u2019s mime type (if "},{"t":"Code","c":[["",[],[]],"--rga-accurate"]},{"t":"Str","c":" is given). You can see all adapters currently included in "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"src/adapters"}],["https://github.com/phiresky/ripgrep-all/tree/master/src/adapters",""]]},{"t":"Str","c":"."}]},{"t":"Para","c":[{"t":"Str","c":"Some rga adapters run external binaries to do the actual work (such as pandoc or ffmpeg), usually by writing to stdin and reading from stdout. Others use a Rust library or bindings to achieve the same effect (like sqlite or zip)."}]},{"t":"Para","c":[{"t":"Str","c":"To read archives, the "},{"t":"Code","c":[["",[],[]],"zip"]},{"t":"Str","c":" and "},{"t":"Code","c":[["",[],[]],"tar"]},{"t":"Str","c":" libraries are used, which work fully in a streaming fashion - this means that the RAM usage is low and no data is ever actually extracted to disk!"}]},{"t":"Para","c":[{"t":"Str","c":"Most adapters read the files from a "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"Read"}],["https://doc.rust-lang.org/std/io/trait.Read.html",""]]},{"t":"Str","c":", so they work completely on streamed data (that can come from anywhere including within nested archives)."}]},{"t":"Para","c":[{"t":"Str","c":"During the extraction, rga-preproc will compress the data with ZSTD to a memory cache while simultaneously writing it uncompressed to stdout. After completion, if the memory cache is smaller than 2MByte, it is written to a "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"rkv"}],["https://docs.rs/rkv/0.9.6/rkv/",""]]},{"t":"Str","c":" cache. The cache is keyed by (adapter, filename, mtime), so if a file changes it\u2019s content is extracted again."}]},{"t":"Header","c":[2,["future-work",[],[]],[{"t":"Str","c":"Future Work"}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"I wanted to add a photograph adapter (based on object classification / detection) for fun, so you can grep for "},{"t":"Quoted","c":[{"t":"DoubleQuote"},[{"t":"Str","c":"mountain"}]]},{"t":"Str","c":" and it will show pictures of mountains, like in Google Photos. It worked with "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"YOLO"}],["https://pjreddie.com/darknet/yolo/",""]]},{"t":"Str","c":", but something more useful and state-of-the art "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"like this"}],["https://github.com/aimagelab/show-control-and-tell",""]]},{"t":"Str","c":" proved very hard to integrate."}]}],[{"t":"Plain","c":[{"t":"Str","c":"7z adapter (couldn\u2019t find a nice to use Rust library with streaming)"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Allow per-adapter configuration options (probably via env (RGA_ADAPTERXYZ_CONF=json))"}]}],[{"t":"Plain","c":[{"t":"Str","c":"Maybe use a different disk kv-store as a cache instead of rkv, because I had some "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"weird problems"}],["https://github.com/phiresky/ripgrep-all/blob/05835c1c42bc3575023a81e5494c5530078730fc/src/preproc_cache.rs#L30",""]]},{"t":"Str","c":" with that. SQLite is great. All other Rust alternatives I could find don\u2019t allow writing from multiple processes."}]}],[{"t":"Plain","c":[{"t":"Str","c":"Tests!"}]}],[{"t":"Plain","c":[{"t":"Str","c":"There\u2019s some more (mostly technical) todos in the code I don\u2019t know how to fix. Help wanted."}]}],[{"t":"Plain","c":[{"t":"Str","c":"Other "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"open issues"}],["https://github.com/phiresky/ripgrep-all/issues",""]]}]}]]},{"t":"Header","c":[2,["similar-tools",[],[]],[{"t":"Str","c":"Similar tools"}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"pdfgrep"}],["https://pdfgrep.org/",""]]}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"this gist"}],["https://gist.github.com/phiresky/5025490526ba70663ab3b8af6c40a8db",""]]},{"t":"Str","c":" has my proof of concept version of a caching extractor to use ripgrep as a replacement for pdfgrep."}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"this gist"}],["https://gist.github.com/ColonolBuendia/314826e37ec35c616d70506c38dc65aa",""]]},{"t":"Str","c":" is a more extensive preprocessing script by "},{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"@ColonolBuendia"}],["https://github.com/ColonolBuendia",""]]}]}],[{"t":"Plain","c":[{"t":"Link","c":[["",[],[]],[{"t":"Str","c":"lesspipe"}],["https://github.com/wofr06/lesspipe",""]]},{"t":"Str","c":" is a tool to make "},{"t":"Code","c":[["",[],[]],"less"]},{"t":"Str","c":" work with many different file types. Different usecase, but similar in what it does."}]}]]}]}')}}]);